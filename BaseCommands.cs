// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace NetClient {
  
  namespace Proto {
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class BaseCommands {
    
      #region Extension registration
      public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
      }
      #endregion
      #region Static variables
      internal static pbd::MessageDescriptor internal__static_TestNetClient_BaseCommands__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::NetClient.BaseCommands, global::NetClient.BaseCommands.Builder> internal__static_TestNetClient_BaseCommands__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_TestNetClient_DeviceState__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::NetClient.DeviceState, global::NetClient.DeviceState.Builder> internal__static_TestNetClient_DeviceState__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_TestNetClient_StreamSound__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::NetClient.StreamSound, global::NetClient.StreamSound.Builder> internal__static_TestNetClient_StreamSound__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_TestNetClient_FairyTale__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::NetClient.FairyTale, global::NetClient.FairyTale.Builder> internal__static_TestNetClient_FairyTale__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_TestNetClient_VideoStream__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::NetClient.VideoStream, global::NetClient.VideoStream.Builder> internal__static_TestNetClient_VideoStream__FieldAccessorTable;
      #endregion
      #region Descriptor
      public static pbd::FileDescriptor Descriptor {
        get { return descriptor; }
      }
      private static pbd::FileDescriptor descriptor;
      
      static BaseCommands() {
        byte[] descriptorData = global::System.Convert.FromBase64String(
            "ChJCYXNlQ29tbWFuZHMucHJvdG8SDVRlc3ROZXRDbGllbnQizAIKDEJhc2VD" + 
            "b21tYW5kcxIuCgR0eXBlGAEgAigOMiAuVGVzdE5ldENsaWVudC5CYXNlQ29t" + 
            "bWFuZHMuVHlwZRIvCgtkZXZpY2VTdGF0ZRgCIAEoCzIaLlRlc3ROZXRDbGll" + 
            "bnQuRGV2aWNlU3RhdGUSLwoLc3RyZWFtU291bmQYAyABKAsyGi5UZXN0TmV0" + 
            "Q2xpZW50LlN0cmVhbVNvdW5kEisKCWZhaXJ5VGFsZRgEIAEoCzIYLlRlc3RO" + 
            "ZXRDbGllbnQuRmFpcnlUYWxlEi8KC3ZpZGVvU3RyZWFtGAUgASgLMhouVGVz" + 
            "dE5ldENsaWVudC5WaWRlb1N0cmVhbSJMCgRUeXBlEhAKDERFVklDRV9TVEFU" + 
            "RRABEhAKDFNUUkVBTV9TT1VORBACEg4KCkZBSVJZX1RBTEUQAxIQCgxWSURF" + 
            "T19TVFJFQU0QBCKBAQoLRGV2aWNlU3RhdGUSMgoEdHlwZRgBIAIoDjIkLlRl" + 
            "c3ROZXRDbGllbnQuRGV2aWNlU3RhdGUuRGlyZWN0aW9uEg0KBXNvdW5kGAIg" + 
            "ASgCEg0KBXBvd2VyGAMgASgIIiAKCURpcmVjdGlvbhIICgRSRUFEEAESCQoF" + 
            "V1JJVEUQAiIrCgtTdHJlYW1Tb3VuZBIMCgRwb3J0GAEgASgFEg4KBnJlbG9h" + 
            "ZBgCIAIoCCK6AQoJRmFpcnlUYWxlEioKA2NtZBgBIAIoDjIdLlRlc3ROZXRD" + 
            "bGllbnQuRmFpcnlUYWxlLlR5cGUSDAoEbmFtZRgCIAIoCRIQCghwb3NpdGlv" + 
            "bhgDIAEoAxITCgttYXhQb3NpdGlvbhgEIAEoAyJMCgRUeXBlEggKBFBMQVkQ" + 
            "ARIQCgxHRVRfUE9TSVRJT04QAhIQCgxTRVRfUE9TSVRJT04QAxIJCgVQQVVT" + 
            "RRAEEgsKB1VOUEFVU0UQBSIbCgtWaWRlb1N0cmVhbRIMCgRwbGF5GAEgAigI");
        pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
          descriptor = root;
          internal__static_TestNetClient_BaseCommands__Descriptor = Descriptor.MessageTypes[0];
          internal__static_TestNetClient_BaseCommands__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::NetClient.BaseCommands, global::NetClient.BaseCommands.Builder>(internal__static_TestNetClient_BaseCommands__Descriptor,
                  new string[] { "Type", "DeviceState", "StreamSound", "FairyTale", "VideoStream", });
          internal__static_TestNetClient_DeviceState__Descriptor = Descriptor.MessageTypes[1];
          internal__static_TestNetClient_DeviceState__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::NetClient.DeviceState, global::NetClient.DeviceState.Builder>(internal__static_TestNetClient_DeviceState__Descriptor,
                  new string[] { "Type", "Sound", "Power", });
          internal__static_TestNetClient_StreamSound__Descriptor = Descriptor.MessageTypes[2];
          internal__static_TestNetClient_StreamSound__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::NetClient.StreamSound, global::NetClient.StreamSound.Builder>(internal__static_TestNetClient_StreamSound__Descriptor,
                  new string[] { "Port", "Reload", });
          internal__static_TestNetClient_FairyTale__Descriptor = Descriptor.MessageTypes[3];
          internal__static_TestNetClient_FairyTale__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::NetClient.FairyTale, global::NetClient.FairyTale.Builder>(internal__static_TestNetClient_FairyTale__Descriptor,
                  new string[] { "Cmd", "Name", "Position", "MaxPosition", });
          internal__static_TestNetClient_VideoStream__Descriptor = Descriptor.MessageTypes[4];
          internal__static_TestNetClient_VideoStream__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::NetClient.VideoStream, global::NetClient.VideoStream.Builder>(internal__static_TestNetClient_VideoStream__Descriptor,
                  new string[] { "Play", });
          return null;
        };
        pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
            new pbd::FileDescriptor[] {
            }, assigner);
      }
      #endregion
      
    }
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class BaseCommands : pb::GeneratedMessage<BaseCommands, BaseCommands.Builder> {
    private BaseCommands() { }
    private static readonly BaseCommands defaultInstance = new BaseCommands().MakeReadOnly();
    private static readonly string[] _baseCommandsFieldNames = new string[] { "deviceState", "fairyTale", "streamSound", "type", "videoStream" };
    private static readonly uint[] _baseCommandsFieldTags = new uint[] { 18, 34, 26, 8, 42 };
    public static BaseCommands DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override BaseCommands DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override BaseCommands ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::NetClient.Proto.BaseCommands.internal__static_TestNetClient_BaseCommands__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<BaseCommands, BaseCommands.Builder> InternalFieldAccessors {
      get { return global::NetClient.Proto.BaseCommands.internal__static_TestNetClient_BaseCommands__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum Type {
        DEVICE_STATE = 1,
        STREAM_SOUND = 2,
        FAIRY_TALE = 3,
        VIDEO_STREAM = 4,
      }
      
    }
    #endregion
    
    public const int TypeFieldNumber = 1;
    private bool hasType;
    private global::NetClient.BaseCommands.Types.Type type_ = global::NetClient.BaseCommands.Types.Type.DEVICE_STATE;
    public bool HasType {
      get { return hasType; }
    }
    public global::NetClient.BaseCommands.Types.Type Type {
      get { return type_; }
    }
    
    public const int DeviceStateFieldNumber = 2;
    private bool hasDeviceState;
    private global::NetClient.DeviceState deviceState_;
    public bool HasDeviceState {
      get { return hasDeviceState; }
    }
    public global::NetClient.DeviceState DeviceState {
      get { return deviceState_ ?? global::NetClient.DeviceState.DefaultInstance; }
    }
    
    public const int StreamSoundFieldNumber = 3;
    private bool hasStreamSound;
    private global::NetClient.StreamSound streamSound_;
    public bool HasStreamSound {
      get { return hasStreamSound; }
    }
    public global::NetClient.StreamSound StreamSound {
      get { return streamSound_ ?? global::NetClient.StreamSound.DefaultInstance; }
    }
    
    public const int FairyTaleFieldNumber = 4;
    private bool hasFairyTale;
    private global::NetClient.FairyTale fairyTale_;
    public bool HasFairyTale {
      get { return hasFairyTale; }
    }
    public global::NetClient.FairyTale FairyTale {
      get { return fairyTale_ ?? global::NetClient.FairyTale.DefaultInstance; }
    }
    
    public const int VideoStreamFieldNumber = 5;
    private bool hasVideoStream;
    private global::NetClient.VideoStream videoStream_;
    public bool HasVideoStream {
      get { return hasVideoStream; }
    }
    public global::NetClient.VideoStream VideoStream {
      get { return videoStream_ ?? global::NetClient.VideoStream.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasType) return false;
        if (HasDeviceState) {
          if (!DeviceState.IsInitialized) return false;
        }
        if (HasStreamSound) {
          if (!StreamSound.IsInitialized) return false;
        }
        if (HasFairyTale) {
          if (!FairyTale.IsInitialized) return false;
        }
        if (HasVideoStream) {
          if (!VideoStream.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _baseCommandsFieldNames;
      if (hasType) {
        output.WriteEnum(1, field_names[3], (int) Type, Type);
      }
      if (hasDeviceState) {
        output.WriteMessage(2, field_names[0], DeviceState);
      }
      if (hasStreamSound) {
        output.WriteMessage(3, field_names[2], StreamSound);
      }
      if (hasFairyTale) {
        output.WriteMessage(4, field_names[1], FairyTale);
      }
      if (hasVideoStream) {
        output.WriteMessage(5, field_names[4], VideoStream);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasType) {
          size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Type);
        }
        if (hasDeviceState) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, DeviceState);
        }
        if (hasStreamSound) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, StreamSound);
        }
        if (hasFairyTale) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, FairyTale);
        }
        if (hasVideoStream) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, VideoStream);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static BaseCommands ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BaseCommands ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BaseCommands ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BaseCommands ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BaseCommands ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BaseCommands ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static BaseCommands ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static BaseCommands ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static BaseCommands ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BaseCommands ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private BaseCommands MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(BaseCommands prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<BaseCommands, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(BaseCommands cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private BaseCommands result;
      
      private BaseCommands PrepareBuilder() {
        if (resultIsReadOnly) {
          BaseCommands original = result;
          result = new BaseCommands();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override BaseCommands MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::NetClient.BaseCommands.Descriptor; }
      }
      
      public override BaseCommands DefaultInstanceForType {
        get { return global::NetClient.BaseCommands.DefaultInstance; }
      }
      
      public override BaseCommands BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is BaseCommands) {
          return MergeFrom((BaseCommands) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(BaseCommands other) {
        if (other == global::NetClient.BaseCommands.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasDeviceState) {
          MergeDeviceState(other.DeviceState);
        }
        if (other.HasStreamSound) {
          MergeStreamSound(other.StreamSound);
        }
        if (other.HasFairyTale) {
          MergeFairyTale(other.FairyTale);
        }
        if (other.HasVideoStream) {
          MergeVideoStream(other.VideoStream);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_baseCommandsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _baseCommandsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.type_, out unknown)) {
                result.hasType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 18: {
              global::NetClient.DeviceState.Builder subBuilder = global::NetClient.DeviceState.CreateBuilder();
              if (result.hasDeviceState) {
                subBuilder.MergeFrom(DeviceState);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              DeviceState = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::NetClient.StreamSound.Builder subBuilder = global::NetClient.StreamSound.CreateBuilder();
              if (result.hasStreamSound) {
                subBuilder.MergeFrom(StreamSound);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              StreamSound = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::NetClient.FairyTale.Builder subBuilder = global::NetClient.FairyTale.CreateBuilder();
              if (result.hasFairyTale) {
                subBuilder.MergeFrom(FairyTale);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              FairyTale = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              global::NetClient.VideoStream.Builder subBuilder = global::NetClient.VideoStream.CreateBuilder();
              if (result.hasVideoStream) {
                subBuilder.MergeFrom(VideoStream);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              VideoStream = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasType {
       get { return result.hasType; }
      }
      public global::NetClient.BaseCommands.Types.Type Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::NetClient.BaseCommands.Types.Type value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = global::NetClient.BaseCommands.Types.Type.DEVICE_STATE;
        return this;
      }
      
      public bool HasDeviceState {
       get { return result.hasDeviceState; }
      }
      public global::NetClient.DeviceState DeviceState {
        get { return result.DeviceState; }
        set { SetDeviceState(value); }
      }
      public Builder SetDeviceState(global::NetClient.DeviceState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDeviceState = true;
        result.deviceState_ = value;
        return this;
      }
      public Builder SetDeviceState(global::NetClient.DeviceState.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasDeviceState = true;
        result.deviceState_ = builderForValue.Build();
        return this;
      }
      public Builder MergeDeviceState(global::NetClient.DeviceState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasDeviceState &&
            result.deviceState_ != global::NetClient.DeviceState.DefaultInstance) {
            result.deviceState_ = global::NetClient.DeviceState.CreateBuilder(result.deviceState_).MergeFrom(value).BuildPartial();
        } else {
          result.deviceState_ = value;
        }
        result.hasDeviceState = true;
        return this;
      }
      public Builder ClearDeviceState() {
        PrepareBuilder();
        result.hasDeviceState = false;
        result.deviceState_ = null;
        return this;
      }
      
      public bool HasStreamSound {
       get { return result.hasStreamSound; }
      }
      public global::NetClient.StreamSound StreamSound {
        get { return result.StreamSound; }
        set { SetStreamSound(value); }
      }
      public Builder SetStreamSound(global::NetClient.StreamSound value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasStreamSound = true;
        result.streamSound_ = value;
        return this;
      }
      public Builder SetStreamSound(global::NetClient.StreamSound.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasStreamSound = true;
        result.streamSound_ = builderForValue.Build();
        return this;
      }
      public Builder MergeStreamSound(global::NetClient.StreamSound value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasStreamSound &&
            result.streamSound_ != global::NetClient.StreamSound.DefaultInstance) {
            result.streamSound_ = global::NetClient.StreamSound.CreateBuilder(result.streamSound_).MergeFrom(value).BuildPartial();
        } else {
          result.streamSound_ = value;
        }
        result.hasStreamSound = true;
        return this;
      }
      public Builder ClearStreamSound() {
        PrepareBuilder();
        result.hasStreamSound = false;
        result.streamSound_ = null;
        return this;
      }
      
      public bool HasFairyTale {
       get { return result.hasFairyTale; }
      }
      public global::NetClient.FairyTale FairyTale {
        get { return result.FairyTale; }
        set { SetFairyTale(value); }
      }
      public Builder SetFairyTale(global::NetClient.FairyTale value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFairyTale = true;
        result.fairyTale_ = value;
        return this;
      }
      public Builder SetFairyTale(global::NetClient.FairyTale.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasFairyTale = true;
        result.fairyTale_ = builderForValue.Build();
        return this;
      }
      public Builder MergeFairyTale(global::NetClient.FairyTale value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasFairyTale &&
            result.fairyTale_ != global::NetClient.FairyTale.DefaultInstance) {
            result.fairyTale_ = global::NetClient.FairyTale.CreateBuilder(result.fairyTale_).MergeFrom(value).BuildPartial();
        } else {
          result.fairyTale_ = value;
        }
        result.hasFairyTale = true;
        return this;
      }
      public Builder ClearFairyTale() {
        PrepareBuilder();
        result.hasFairyTale = false;
        result.fairyTale_ = null;
        return this;
      }
      
      public bool HasVideoStream {
       get { return result.hasVideoStream; }
      }
      public global::NetClient.VideoStream VideoStream {
        get { return result.VideoStream; }
        set { SetVideoStream(value); }
      }
      public Builder SetVideoStream(global::NetClient.VideoStream value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasVideoStream = true;
        result.videoStream_ = value;
        return this;
      }
      public Builder SetVideoStream(global::NetClient.VideoStream.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasVideoStream = true;
        result.videoStream_ = builderForValue.Build();
        return this;
      }
      public Builder MergeVideoStream(global::NetClient.VideoStream value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasVideoStream &&
            result.videoStream_ != global::NetClient.VideoStream.DefaultInstance) {
            result.videoStream_ = global::NetClient.VideoStream.CreateBuilder(result.videoStream_).MergeFrom(value).BuildPartial();
        } else {
          result.videoStream_ = value;
        }
        result.hasVideoStream = true;
        return this;
      }
      public Builder ClearVideoStream() {
        PrepareBuilder();
        result.hasVideoStream = false;
        result.videoStream_ = null;
        return this;
      }
    }
    static BaseCommands() {
      object.ReferenceEquals(global::NetClient.Proto.BaseCommands.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class DeviceState : pb::GeneratedMessage<DeviceState, DeviceState.Builder> {
    private DeviceState() { }
    private static readonly DeviceState defaultInstance = new DeviceState().MakeReadOnly();
    private static readonly string[] _deviceStateFieldNames = new string[] { "power", "sound", "type" };
    private static readonly uint[] _deviceStateFieldTags = new uint[] { 24, 21, 8 };
    public static DeviceState DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override DeviceState DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override DeviceState ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::NetClient.Proto.BaseCommands.internal__static_TestNetClient_DeviceState__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<DeviceState, DeviceState.Builder> InternalFieldAccessors {
      get { return global::NetClient.Proto.BaseCommands.internal__static_TestNetClient_DeviceState__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum Direction {
        READ = 1,
        WRITE = 2,
      }
      
    }
    #endregion
    
    public const int TypeFieldNumber = 1;
    private bool hasType;
    private global::NetClient.DeviceState.Types.Direction type_ = global::NetClient.DeviceState.Types.Direction.READ;
    public bool HasType {
      get { return hasType; }
    }
    public global::NetClient.DeviceState.Types.Direction Type {
      get { return type_; }
    }
    
    public const int SoundFieldNumber = 2;
    private bool hasSound;
    private float sound_;
    public bool HasSound {
      get { return hasSound; }
    }
    public float Sound {
      get { return sound_; }
    }
    
    public const int PowerFieldNumber = 3;
    private bool hasPower;
    private bool power_;
    public bool HasPower {
      get { return hasPower; }
    }
    public bool Power {
      get { return power_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasType) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _deviceStateFieldNames;
      if (hasType) {
        output.WriteEnum(1, field_names[2], (int) Type, Type);
      }
      if (hasSound) {
        output.WriteFloat(2, field_names[1], Sound);
      }
      if (hasPower) {
        output.WriteBool(3, field_names[0], Power);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasType) {
          size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Type);
        }
        if (hasSound) {
          size += pb::CodedOutputStream.ComputeFloatSize(2, Sound);
        }
        if (hasPower) {
          size += pb::CodedOutputStream.ComputeBoolSize(3, Power);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static DeviceState ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DeviceState ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DeviceState ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DeviceState ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DeviceState ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DeviceState ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static DeviceState ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static DeviceState ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static DeviceState ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DeviceState ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private DeviceState MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(DeviceState prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<DeviceState, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(DeviceState cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private DeviceState result;
      
      private DeviceState PrepareBuilder() {
        if (resultIsReadOnly) {
          DeviceState original = result;
          result = new DeviceState();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override DeviceState MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::NetClient.DeviceState.Descriptor; }
      }
      
      public override DeviceState DefaultInstanceForType {
        get { return global::NetClient.DeviceState.DefaultInstance; }
      }
      
      public override DeviceState BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is DeviceState) {
          return MergeFrom((DeviceState) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(DeviceState other) {
        if (other == global::NetClient.DeviceState.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasSound) {
          Sound = other.Sound;
        }
        if (other.HasPower) {
          Power = other.Power;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_deviceStateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _deviceStateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.type_, out unknown)) {
                result.hasType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 21: {
              result.hasSound = input.ReadFloat(ref result.sound_);
              break;
            }
            case 24: {
              result.hasPower = input.ReadBool(ref result.power_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasType {
       get { return result.hasType; }
      }
      public global::NetClient.DeviceState.Types.Direction Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::NetClient.DeviceState.Types.Direction value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = global::NetClient.DeviceState.Types.Direction.READ;
        return this;
      }
      
      public bool HasSound {
        get { return result.hasSound; }
      }
      public float Sound {
        get { return result.Sound; }
        set { SetSound(value); }
      }
      public Builder SetSound(float value) {
        PrepareBuilder();
        result.hasSound = true;
        result.sound_ = value;
        return this;
      }
      public Builder ClearSound() {
        PrepareBuilder();
        result.hasSound = false;
        result.sound_ = 0F;
        return this;
      }
      
      public bool HasPower {
        get { return result.hasPower; }
      }
      public bool Power {
        get { return result.Power; }
        set { SetPower(value); }
      }
      public Builder SetPower(bool value) {
        PrepareBuilder();
        result.hasPower = true;
        result.power_ = value;
        return this;
      }
      public Builder ClearPower() {
        PrepareBuilder();
        result.hasPower = false;
        result.power_ = false;
        return this;
      }
    }
    static DeviceState() {
      object.ReferenceEquals(global::NetClient.Proto.BaseCommands.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class StreamSound : pb::GeneratedMessage<StreamSound, StreamSound.Builder> {
    private StreamSound() { }
    private static readonly StreamSound defaultInstance = new StreamSound().MakeReadOnly();
    private static readonly string[] _streamSoundFieldNames = new string[] { "port", "reload" };
    private static readonly uint[] _streamSoundFieldTags = new uint[] { 8, 16 };
    public static StreamSound DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override StreamSound DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override StreamSound ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::NetClient.Proto.BaseCommands.internal__static_TestNetClient_StreamSound__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<StreamSound, StreamSound.Builder> InternalFieldAccessors {
      get { return global::NetClient.Proto.BaseCommands.internal__static_TestNetClient_StreamSound__FieldAccessorTable; }
    }
    
    public const int PortFieldNumber = 1;
    private bool hasPort;
    private int port_;
    public bool HasPort {
      get { return hasPort; }
    }
    public int Port {
      get { return port_; }
    }
    
    public const int ReloadFieldNumber = 2;
    private bool hasReload;
    private bool reload_;
    public bool HasReload {
      get { return hasReload; }
    }
    public bool Reload {
      get { return reload_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasReload) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _streamSoundFieldNames;
      if (hasPort) {
        output.WriteInt32(1, field_names[0], Port);
      }
      if (hasReload) {
        output.WriteBool(2, field_names[1], Reload);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasPort) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Port);
        }
        if (hasReload) {
          size += pb::CodedOutputStream.ComputeBoolSize(2, Reload);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static StreamSound ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StreamSound ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StreamSound ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StreamSound ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StreamSound ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StreamSound ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static StreamSound ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static StreamSound ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static StreamSound ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StreamSound ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private StreamSound MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(StreamSound prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<StreamSound, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(StreamSound cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private StreamSound result;
      
      private StreamSound PrepareBuilder() {
        if (resultIsReadOnly) {
          StreamSound original = result;
          result = new StreamSound();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override StreamSound MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::NetClient.StreamSound.Descriptor; }
      }
      
      public override StreamSound DefaultInstanceForType {
        get { return global::NetClient.StreamSound.DefaultInstance; }
      }
      
      public override StreamSound BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is StreamSound) {
          return MergeFrom((StreamSound) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(StreamSound other) {
        if (other == global::NetClient.StreamSound.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPort) {
          Port = other.Port;
        }
        if (other.HasReload) {
          Reload = other.Reload;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_streamSoundFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _streamSoundFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasPort = input.ReadInt32(ref result.port_);
              break;
            }
            case 16: {
              result.hasReload = input.ReadBool(ref result.reload_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPort {
        get { return result.hasPort; }
      }
      public int Port {
        get { return result.Port; }
        set { SetPort(value); }
      }
      public Builder SetPort(int value) {
        PrepareBuilder();
        result.hasPort = true;
        result.port_ = value;
        return this;
      }
      public Builder ClearPort() {
        PrepareBuilder();
        result.hasPort = false;
        result.port_ = 0;
        return this;
      }
      
      public bool HasReload {
        get { return result.hasReload; }
      }
      public bool Reload {
        get { return result.Reload; }
        set { SetReload(value); }
      }
      public Builder SetReload(bool value) {
        PrepareBuilder();
        result.hasReload = true;
        result.reload_ = value;
        return this;
      }
      public Builder ClearReload() {
        PrepareBuilder();
        result.hasReload = false;
        result.reload_ = false;
        return this;
      }
    }
    static StreamSound() {
      object.ReferenceEquals(global::NetClient.Proto.BaseCommands.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class FairyTale : pb::GeneratedMessage<FairyTale, FairyTale.Builder> {
    private FairyTale() { }
    private static readonly FairyTale defaultInstance = new FairyTale().MakeReadOnly();
    private static readonly string[] _fairyTaleFieldNames = new string[] { "cmd", "maxPosition", "name", "position" };
    private static readonly uint[] _fairyTaleFieldTags = new uint[] { 8, 32, 18, 24 };
    public static FairyTale DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override FairyTale DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override FairyTale ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::NetClient.Proto.BaseCommands.internal__static_TestNetClient_FairyTale__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<FairyTale, FairyTale.Builder> InternalFieldAccessors {
      get { return global::NetClient.Proto.BaseCommands.internal__static_TestNetClient_FairyTale__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum Type {
        PLAY = 1,
        GET_POSITION = 2,
        SET_POSITION = 3,
        PAUSE = 4,
        UNPAUSE = 5,
      }
      
    }
    #endregion
    
    public const int CmdFieldNumber = 1;
    private bool hasCmd;
    private global::NetClient.FairyTale.Types.Type cmd_ = global::NetClient.FairyTale.Types.Type.PLAY;
    public bool HasCmd {
      get { return hasCmd; }
    }
    public global::NetClient.FairyTale.Types.Type Cmd {
      get { return cmd_; }
    }
    
    public const int NameFieldNumber = 2;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int PositionFieldNumber = 3;
    private bool hasPosition;
    private long position_;
    public bool HasPosition {
      get { return hasPosition; }
    }
    public long Position {
      get { return position_; }
    }
    
    public const int MaxPositionFieldNumber = 4;
    private bool hasMaxPosition;
    private long maxPosition_;
    public bool HasMaxPosition {
      get { return hasMaxPosition; }
    }
    public long MaxPosition {
      get { return maxPosition_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCmd) return false;
        if (!hasName) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _fairyTaleFieldNames;
      if (hasCmd) {
        output.WriteEnum(1, field_names[0], (int) Cmd, Cmd);
      }
      if (hasName) {
        output.WriteString(2, field_names[2], Name);
      }
      if (hasPosition) {
        output.WriteInt64(3, field_names[3], Position);
      }
      if (hasMaxPosition) {
        output.WriteInt64(4, field_names[1], MaxPosition);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasCmd) {
          size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Cmd);
        }
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Name);
        }
        if (hasPosition) {
          size += pb::CodedOutputStream.ComputeInt64Size(3, Position);
        }
        if (hasMaxPosition) {
          size += pb::CodedOutputStream.ComputeInt64Size(4, MaxPosition);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static FairyTale ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FairyTale ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FairyTale ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FairyTale ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FairyTale ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FairyTale ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static FairyTale ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static FairyTale ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static FairyTale ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FairyTale ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private FairyTale MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(FairyTale prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<FairyTale, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(FairyTale cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private FairyTale result;
      
      private FairyTale PrepareBuilder() {
        if (resultIsReadOnly) {
          FairyTale original = result;
          result = new FairyTale();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override FairyTale MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::NetClient.FairyTale.Descriptor; }
      }
      
      public override FairyTale DefaultInstanceForType {
        get { return global::NetClient.FairyTale.DefaultInstance; }
      }
      
      public override FairyTale BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is FairyTale) {
          return MergeFrom((FairyTale) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(FairyTale other) {
        if (other == global::NetClient.FairyTale.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCmd) {
          Cmd = other.Cmd;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasPosition) {
          Position = other.Position;
        }
        if (other.HasMaxPosition) {
          MaxPosition = other.MaxPosition;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_fairyTaleFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _fairyTaleFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.cmd_, out unknown)) {
                result.hasCmd = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 18: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 24: {
              result.hasPosition = input.ReadInt64(ref result.position_);
              break;
            }
            case 32: {
              result.hasMaxPosition = input.ReadInt64(ref result.maxPosition_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCmd {
       get { return result.hasCmd; }
      }
      public global::NetClient.FairyTale.Types.Type Cmd {
        get { return result.Cmd; }
        set { SetCmd(value); }
      }
      public Builder SetCmd(global::NetClient.FairyTale.Types.Type value) {
        PrepareBuilder();
        result.hasCmd = true;
        result.cmd_ = value;
        return this;
      }
      public Builder ClearCmd() {
        PrepareBuilder();
        result.hasCmd = false;
        result.cmd_ = global::NetClient.FairyTale.Types.Type.PLAY;
        return this;
      }
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasPosition {
        get { return result.hasPosition; }
      }
      public long Position {
        get { return result.Position; }
        set { SetPosition(value); }
      }
      public Builder SetPosition(long value) {
        PrepareBuilder();
        result.hasPosition = true;
        result.position_ = value;
        return this;
      }
      public Builder ClearPosition() {
        PrepareBuilder();
        result.hasPosition = false;
        result.position_ = 0L;
        return this;
      }
      
      public bool HasMaxPosition {
        get { return result.hasMaxPosition; }
      }
      public long MaxPosition {
        get { return result.MaxPosition; }
        set { SetMaxPosition(value); }
      }
      public Builder SetMaxPosition(long value) {
        PrepareBuilder();
        result.hasMaxPosition = true;
        result.maxPosition_ = value;
        return this;
      }
      public Builder ClearMaxPosition() {
        PrepareBuilder();
        result.hasMaxPosition = false;
        result.maxPosition_ = 0L;
        return this;
      }
    }
    static FairyTale() {
      object.ReferenceEquals(global::NetClient.Proto.BaseCommands.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class VideoStream : pb::GeneratedMessage<VideoStream, VideoStream.Builder> {
    private VideoStream() { }
    private static readonly VideoStream defaultInstance = new VideoStream().MakeReadOnly();
    private static readonly string[] _videoStreamFieldNames = new string[] { "play" };
    private static readonly uint[] _videoStreamFieldTags = new uint[] { 8 };
    public static VideoStream DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override VideoStream DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override VideoStream ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::NetClient.Proto.BaseCommands.internal__static_TestNetClient_VideoStream__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<VideoStream, VideoStream.Builder> InternalFieldAccessors {
      get { return global::NetClient.Proto.BaseCommands.internal__static_TestNetClient_VideoStream__FieldAccessorTable; }
    }
    
    public const int PlayFieldNumber = 1;
    private bool hasPlay;
    private bool play_;
    public bool HasPlay {
      get { return hasPlay; }
    }
    public bool Play {
      get { return play_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPlay) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _videoStreamFieldNames;
      if (hasPlay) {
        output.WriteBool(1, field_names[0], Play);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasPlay) {
          size += pb::CodedOutputStream.ComputeBoolSize(1, Play);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static VideoStream ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static VideoStream ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static VideoStream ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static VideoStream ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static VideoStream ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static VideoStream ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static VideoStream ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static VideoStream ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static VideoStream ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static VideoStream ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private VideoStream MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(VideoStream prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<VideoStream, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(VideoStream cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private VideoStream result;
      
      private VideoStream PrepareBuilder() {
        if (resultIsReadOnly) {
          VideoStream original = result;
          result = new VideoStream();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override VideoStream MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::NetClient.VideoStream.Descriptor; }
      }
      
      public override VideoStream DefaultInstanceForType {
        get { return global::NetClient.VideoStream.DefaultInstance; }
      }
      
      public override VideoStream BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is VideoStream) {
          return MergeFrom((VideoStream) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(VideoStream other) {
        if (other == global::NetClient.VideoStream.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPlay) {
          Play = other.Play;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_videoStreamFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _videoStreamFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasPlay = input.ReadBool(ref result.play_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPlay {
        get { return result.hasPlay; }
      }
      public bool Play {
        get { return result.Play; }
        set { SetPlay(value); }
      }
      public Builder SetPlay(bool value) {
        PrepareBuilder();
        result.hasPlay = true;
        result.play_ = value;
        return this;
      }
      public Builder ClearPlay() {
        PrepareBuilder();
        result.hasPlay = false;
        result.play_ = false;
        return this;
      }
    }
    static VideoStream() {
      object.ReferenceEquals(global::NetClient.Proto.BaseCommands.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
